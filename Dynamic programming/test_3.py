import unittest
from dp import best_itinerary

class TestRandomTask2(unittest.TestCase):
    def testCase0(self):
        profit = [[25, 3, 46, 17, 95, 60, 7, 62], [72, 52, 57, 92, 70, 23, 56, 9]]
        start = 7
        quarantine = [2, 1, 2, 2, 2, 0, 2, 0]
        solution = 71
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase1(self):
        profit = [[21, 48, 14, 95, 33, 26, 37, 99, 93, 24, 25, 75, 99, 99, 57, 85, 38, 20], [49, 57, 31, 85, 11, 61, 42, 64, 82, 88, 37, 48, 96, 93, 56, 99, 98, 55]]
        start = 17
        quarantine = [2, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 2, 0, 2, 0]
        solution = 75
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase2(self):
        profit = [[90, 13, 11, 78, 96, 89, 66, 1, 59, 40, 62, 44, 46, 12, 29, 90, 3, 84, 96], [99, 69, 19, 73, 27, 2, 71, 59, 7, 6, 26, 57, 71, 34, 37, 25, 73, 17, 41], [76, 72, 37, 14, 37, 100, 85, 77, 17, 29, 36, 24, 46, 87, 89, 76, 36, 14, 19], [2, 15, 46, 65, 0, 1, 61, 73, 80, 43, 66, 27, 24, 14, 36, 3, 34, 37, 92], [30, 34, 71, 69, 73, 37, 45, 63, 55, 13, 77, 11, 14, 18, 91, 92, 97, 45, 50]]
        start = 3
        quarantine = [4, 2, 4, 4, 4, 2, 3, 4, 3, 1, 0, 1, 4, 1, 3, 3, 4, 0, 5]
        solution = 299
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase3(self):
        profit = [[7, 61, 17, 56, 96, 88, 23, 40, 61, 31, 30, 42, 80, 42, 100, 75, 17, 50, 71], [74, 37, 100, 46, 98, 48, 53, 78, 3, 7, 69, 63, 49, 78, 90, 88, 32, 56, 85], [7, 13, 14, 54, 14, 56, 17, 79, 5, 98, 75, 29, 16, 51, 91, 37, 87, 82, 19], [15, 91, 86, 31, 100, 13, 0, 92, 32, 29, 62, 72, 19, 57, 20, 15, 66, 97, 11]]
        start = 15
        quarantine = [0, 4, 2, 4, 0, 4, 1, 0, 1, 0, 3, 3, 2, 2, 3, 1, 1, 3, 0]
        solution = 215
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase4(self):
        profit = [[61, 41, 35, 72, 63, 54, 87, 60, 11, 50, 76, 19, 51, 86], [1, 74, 25, 50, 42, 20, 28, 47, 59, 81, 76, 51, 58, 2], [32, 85, 20, 21, 38, 14, 29, 87, 50, 9, 55, 9, 73, 89], [18, 99, 15, 70, 94, 25, 0, 50, 68, 89, 48, 29, 57, 56], [41, 20, 35, 53, 41, 93, 7, 100, 71, 6, 100, 67, 84, 70], [97, 44, 36, 68, 68, 6, 95, 97, 83, 51, 7, 90, 85, 83], [15, 26, 24, 92, 65, 27, 29, 43, 96, 53, 53, 62, 31, 44]]
        start = 13
        quarantine = [1, 0, 3, 6, 4, 5, 0, 7, 2, 2, 1, 2, 3, 2]
        solution = 430
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase5(self):
        profit = [[40, 50, 56, 0, 55, 39, 17, 68, 82, 58, 92, 28, 48, 9, 97, 33, 0, 90, 52, 39, 55], [80, 82, 97, 53, 43, 50, 6, 30, 7, 97, 2, 70, 43, 69, 34, 89, 91, 26, 82, 71, 49], [48, 70, 30, 62, 99, 44, 28, 12, 88, 49, 49, 59, 14, 56, 7, 55, 48, 7, 41, 2, 36], [13, 19, 60, 44, 87, 45, 82, 45, 55, 13, 79, 37, 5, 1, 20, 63, 36, 42, 30, 75, 89], [59, 70, 48, 90, 59, 63, 58, 61, 8, 66, 54, 89, 90, 1, 47, 67, 86, 44, 52, 56, 67]]
        start = 3
        quarantine = [3, 0, 4, 3, 3, 1, 2, 2, 1, 4, 4, 5, 3, 2, 4, 5, 5, 0, 5, 4, 5]
        solution = 249
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase6(self):
        profit = [[94, 65, 28, 99, 87, 65], [80, 35, 52, 90, 37, 64]]
        start = 4
        quarantine = [0, 0, 2, 1, 2, 2]
        solution = 124
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase7(self):
        profit = [[1, 34, 24, 55, 1, 24, 38, 64, 57, 68, 45, 65], [9, 21, 12, 99, 78, 58, 37, 57, 79, 59, 15, 93]]
        start = 5
        quarantine = [1, 1, 2, 1, 1, 0, 2, 2, 1, 0, 1, 0]
        solution = 82
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase8(self):
        profit = [[56, 56, 73, 81, 37, 25, 57, 49, 55, 7, 73, 40], [71, 8, 44, 12, 38, 26, 50, 23, 32, 5, 9, 84], [95, 75, 68, 39, 70, 47, 48, 65, 3, 14, 5, 76], [12, 52, 25, 61, 57, 85, 39, 43, 27, 15, 9, 14], [92, 99, 36, 0, 51, 44, 15, 20, 73, 48, 48, 17], [57, 19, 30, 62, 60, 40, 40, 89, 18, 3, 13, 39], [30, 89, 26, 37, 11, 57, 82, 27, 41, 67, 42, 8], [63, 70, 74, 71, 79, 58, 56, 70, 43, 92, 80, 97]]
        start = 9
        quarantine = [6, 0, 0, 8, 7, 2, 8, 1, 5, 3, 2, 4]
        solution = 251
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase9(self):
        profit = [[11, 10, 52, 76, 80, 81, 17, 99, 57, 37, 40, 11, 86, 96, 12, 38, 77, 39, 57, 3], [82, 5, 81, 73, 25, 7, 5, 43, 41, 18, 94, 84, 53, 76, 51, 87, 15, 48, 41, 38]]
        start = 9
        quarantine = [1, 0, 2, 2, 1, 2, 0, 2, 2, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 2]
        solution = 94 
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase10(self):
        profit = [[77, 58, 70, 17, 9, 87, 83, 64, 63, 96, 58, 56, 12, 97, 88, 99, 79], [2, 35, 76, 63, 100, 90, 30, 79, 48, 1, 45, 53, 98, 5, 59, 26, 89], [83, 2, 45, 95, 47, 74, 9, 0, 42, 93, 0, 25, 78, 46, 4, 85, 23], [41, 11, 47, 99, 10, 94, 27, 71, 73, 73, 45, 73, 41, 58, 98, 48, 81], [84, 96, 41, 28, 51, 56, 46, 93, 86, 11, 83, 3, 39, 31, 58, 1, 88], [82, 73, 24, 46, 19, 5, 30, 84, 75, 24, 58, 97, 26, 83, 51, 66, 65], [35, 0, 17, 20, 13, 17, 14, 5, 40, 61, 44, 63, 8, 16, 22, 59, 95], [52, 75, 66, 85, 8, 28, 63, 36, 56, 21, 26, 10, 72, 26, 8, 72, 100], [82, 56, 69, 71, 71, 81, 63, 82, 45, 40, 47, 34, 38, 21, 97, 73, 71], [61, 75, 62, 52, 53, 74, 2, 75, 25, 75, 59, 9, 53, 56, 41, 58, 12]]
        start = 7
        quarantine = [8, 2, 3, 1, 2, 9, 4, 0, 3, 5, 0, 3, 3, 7, 7, 5, 4]
        solution = 589
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase11(self):
        profit = [[69, 4, 87, 92, 67, 54, 67, 94], [64, 3, 19, 57, 49, 53, 12, 59], [23, 87, 88, 69, 72, 56, 31, 95], [82, 32, 48, 19, 49, 62, 17, 40], [0, 58, 1, 59, 53, 87, 76, 27], [21, 23, 84, 95, 45, 62, 59, 17], [45, 77, 49, 22, 81, 94, 28, 53], [72, 91, 58, 44, 54, 15, 46, 100]]
        start = 0
        quarantine = [2, 7, 4, 7, 2, 4, 0, 7]
        solution = 376
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase12(self):
        profit = [[66, 52, 49, 99, 93, 5, 79, 82, 75, 41], [91, 70, 87, 57, 14, 93, 29, 85, 98, 47], [73, 95, 48, 38, 23, 13, 24, 61, 40, 38], [80, 94, 66, 30, 62, 92, 42, 49, 90, 15], [39, 96, 83, 76, 39, 7, 50, 86, 12, 34], [24, 93, 71, 19, 52, 54, 56, 20, 61, 69], [62, 93, 40, 12, 8, 79, 23, 15, 37, 41], [94, 86, 78, 77, 31, 85, 68, 98, 29, 10], [87, 3, 83, 3, 66, 77, 66, 50, 64, 64]]
        start = 3
        quarantine = [4, 8, 5, 5, 3, 3, 8, 8, 4, 6]
        solution = 411
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase13(self):
        profit = [[49, 82, 96, 70, 100, 55, 62, 53, 6, 51, 81, 73, 22, 65, 42, 92, 16, 62, 98], [11, 16, 91, 7, 83, 35, 19, 39, 13, 74, 81, 17, 34, 16, 48, 96, 9, 51, 83], [21, 61, 62, 55, 22, 12, 42, 18, 70, 28, 14, 56, 4, 76, 92, 57, 2, 12, 15], [75, 64, 92, 95, 96, 99, 42, 6, 68, 92, 84, 75, 89, 8, 69, 54, 69, 82, 8], [68, 0, 3, 78, 42, 69, 59, 25, 37, 38, 76, 99, 99, 5, 4, 93, 87, 4, 13], [33, 32, 65, 15, 97, 90, 5, 85, 28, 74, 30, 98, 68, 91, 43, 4, 50, 6, 90]]
        start = 12
        quarantine = [6, 1, 3, 6, 5, 5, 1, 6, 6, 3, 6, 5, 1, 5, 5, 4, 1, 5, 2]
        solution = 316
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase14(self):
        profit = [[49, 68, 40, 43, 18, 39, 65, 16, 22, 24, 69, 0, 50, 33, 99, 10, 11, 8, 80, 58, 69, 99, 80, 96, 20], [99, 87, 17, 13, 86, 75, 39, 48, 66, 36, 61, 63, 77, 19, 49, 65, 59, 71, 6, 33, 98, 22, 48, 26, 70], [52, 35, 44, 94, 100, 52, 68, 16, 40, 67, 24, 50, 0, 42, 13, 96, 46, 72, 52, 87, 74, 93, 32, 54, 51]]
        start = 4
        quarantine = [2, 2, 2, 3, 1, 1, 1, 0, 3, 3, 3, 3, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 2, 2, 1]
        solution = 204
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase15(self):
        profit = [[98, 36, 29, 82, 1, 26, 8, 43, 2, 5, 61, 10, 97, 25, 43, 66, 37, 77, 55, 5, 76, 39, 27, 53, 39, 75, 58, 69, 82, 44]]
        start = 23
        quarantine = [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1]
        solution = 53
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase16(self):
        profit = [[73, 52, 61, 81, 80, 23, 47, 13, 39, 43, 96]]
        start = 9
        quarantine = [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1]
        solution = 43
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase17(self):
        profit = [[69, 12, 66, 26, 85, 88], [43, 98, 6, 78, 50, 70]]
        start = 5
        quarantine = [2, 1, 2, 2, 0, 2]
        solution = 158
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase18(self):
        profit = [[22, 25, 67]]
        start = 1
        quarantine = [0, 0, 0]
        solution = 25
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase19(self):
        profit = [[16, 63, 45, 28, 86, 22, 36, 61, 82, 100, 47, 57, 56, 20, 51, 66, 99, 2, 61, 99, 43, 85, 39, 78, 51, 74, 77, 73, 60, 100], [58, 64, 8, 73, 99, 30, 54, 19, 22, 30, 69, 96, 60, 92, 7, 64, 13, 44, 77, 48, 69, 81, 85, 91, 99, 30, 55, 91, 4, 86]]
        start = 7
        quarantine = [2, 1, 1, 0, 0, 2, 1, 0, 0, 1, 0, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 1, 1, 1, 2, 1, 1, 1]
        solution = 80
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase20(self):
        profit = [[80, 10, 46, 1, 99, 70, 83, 63, 78, 51, 88], [6, 21, 76, 22, 81, 23, 65, 47, 1, 79, 80]]
        start = 0
        quarantine = [1, 1, 2, 0, 1, 0, 2, 0, 2, 2, 1]
        solution = 86
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase21(self):
        profit = [[42, 67, 54, 3, 62, 45, 62, 16, 98, 21, 90, 76, 51, 0, 77, 68], [10, 65, 59, 1, 58, 44, 9, 1, 29, 33, 60, 6, 84, 55, 66, 9]]
        start = 4
        quarantine = [2, 1, 0, 0, 0, 1, 2, 2, 1, 2, 1, 0, 1, 2, 2, 1]
        solution = 120
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase22(self):
        profit = [[86, 65, 0, 55, 0, 38, 62, 62, 62, 91, 44, 18, 75, 97, 11, 90, 55, 42, 3, 31, 69, 60, 69, 52], [96, 96, 82, 66, 97, 76, 74, 22, 55, 30, 74, 31, 83, 18, 62, 11, 76, 39, 2, 80, 86, 47, 91, 26], [91, 61, 50, 89, 29, 95, 84, 57, 41, 81, 26, 33, 26, 72, 37, 9, 51, 2, 36, 31, 64, 56, 21, 1], [99, 25, 92, 97, 84, 50, 97, 42, 55, 3, 32, 86, 1, 21, 2, 21, 81, 89, 30, 5, 22, 62, 92, 70], [71, 37, 62, 78, 20, 75, 34, 19, 8, 38, 79, 32, 49, 36, 55, 99, 32, 91, 45, 39, 23, 48, 63, 50], [93, 78, 78, 50, 10, 16, 30, 50, 75, 35, 11, 13, 85, 83, 20, 65, 55, 28, 80, 21, 40, 45, 27, 40]]
        start = 6
        quarantine = [5, 6, 1, 3, 2, 0, 1, 1, 2, 2, 3, 1, 2, 6, 6, 1, 4, 3, 6, 5, 5, 3, 4, 1]
        solution = 381
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase23(self):
        profit = [[44, 46, 30, 8, 53, 73, 6, 39, 47, 43, 23, 93, 99, 68, 3, 20, 21, 70, 94, 98], [91, 16, 0, 28, 82, 65, 32, 67, 37, 7, 58, 15, 56, 5, 66, 57, 94, 30, 47, 8], [69, 37, 14, 75, 53, 65, 71, 7, 18, 98, 65, 53, 62, 16, 92, 88, 2, 39, 25, 1], [4, 96, 47, 12, 94, 35, 25, 25, 69, 47, 3, 92, 58, 85, 11, 69, 59, 24, 42, 43], [27, 99, 37, 76, 41, 73, 60, 42, 84, 47, 90, 56, 73, 73, 10, 95, 5, 41, 56, 86], [58, 55, 78, 18, 16, 12, 32, 89, 57, 86, 76, 32, 84, 19, 2, 94, 75, 9, 52, 87]]
        start = 11
        quarantine = [2, 2, 1, 2, 4, 0, 0, 3, 6, 2, 1, 0, 3, 0, 3, 2, 0, 3, 5, 6]
        solution = 341
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase24(self):
        profit = [[69, 53, 32, 73, 88, 87, 58, 67, 14, 98, 74, 77, 84, 100, 69, 47, 9, 27, 87, 70, 90, 24, 94, 25, 46, 17, 0, 61], [6, 94, 58, 64, 15, 11, 45, 55, 82, 86, 62, 99, 51, 32, 38, 99, 75, 32, 45, 13, 92, 84, 50, 46, 26, 48, 43, 43], [56, 76, 14, 27, 86, 27, 11, 7, 74, 82, 78, 97, 51, 51, 63, 93, 66, 77, 34, 62, 22, 44, 30, 73, 80, 91, 83, 35], [36, 3, 38, 70, 18, 85, 16, 89, 24, 38, 43, 4, 97, 64, 7, 55, 1, 11, 29, 19, 21, 94, 77, 43, 2, 52, 68, 10], [40, 49, 28, 9, 36, 35, 46, 71, 44, 28, 10, 54, 70, 6, 55, 91, 70, 97, 10, 37, 28, 61, 62, 93, 11, 2, 58, 42], [71, 56, 8, 81, 45, 26, 100, 84, 52, 0, 76, 4, 48, 19, 21, 43, 17, 19, 33, 75, 3, 8, 82, 80, 8, 42, 38, 96], [13, 2, 90, 45, 28, 80, 24, 33, 14, 73, 3, 67, 12, 7, 9, 13, 9, 25, 61, 83, 60, 95, 10, 45, 43, 83, 90, 94], [38, 15, 85, 85, 95, 85, 12, 52, 29, 37, 30, 66, 82, 22, 73, 33, 12, 83, 59, 45, 75, 94, 75, 63, 65, 26, 72, 92], [10, 66, 51, 6, 54, 23, 24, 64, 94, 24, 57, 2, 46, 26, 60, 32, 90, 92, 51, 53, 42, 68, 99, 32, 91, 40, 24, 85], [16, 12, 52, 86, 11, 88, 59, 31, 87, 59, 18, 52, 70, 44, 11, 53, 40, 13, 31, 66, 36, 37, 12, 92, 51, 38, 33, 12]]
        start = 15
        quarantine = [4, 8, 3, 7, 8, 0, 2, 1, 9, 10, 4, 9, 1, 2, 8, 9, 2, 2, 1, 8, 6, 6, 4, 3, 5, 7, 5, 0]
        solution = 559
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase25(self):
        profit = [[47, 56, 62, 4, 52, 5, 53, 92, 54, 71, 45, 26, 81, 27, 70, 80, 71, 98], [6, 76, 29, 55, 53, 24, 54, 6, 24, 91, 13, 6, 100, 8, 7, 84, 6, 16], [96, 8, 38, 90, 98, 53, 93, 100, 66, 11, 92, 53, 75, 21, 41, 77, 17, 44], [92, 46, 38, 47, 76, 12, 41, 4, 54, 99, 54, 83, 21, 85, 26, 48, 94, 64], [97, 21, 67, 10, 1, 10, 11, 36, 94, 18, 42, 72, 0, 3, 11, 28, 47, 18], [48, 6, 2, 72, 49, 88, 2, 75, 83, 26, 95, 4, 59, 2, 24, 88, 88, 50]]
        start = 6
        quarantine = [2, 1, 1, 5, 6, 2, 1, 5, 4, 1, 0, 4, 1, 1, 4, 1, 3, 0]
        solution = 254
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase26(self):
        profit = [[32, 33, 96, 1], [100, 54, 47, 23], [31, 28, 68, 97], [63, 18, 52, 60], [7, 60, 47, 77], [2, 29, 73, 6], [73, 61, 39, 99]]
        start = 2
        quarantine = [3, 4, 3, 4]
        solution = 422
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase27(self):
        profit = [[7, 31, 20, 93, 5, 53, 4, 63, 32, 81, 89, 96, 15, 44], [27, 9, 82, 15, 51, 59, 52, 66, 32, 43, 33, 7, 57, 9], [10, 42, 21, 44, 24, 37, 45, 88, 88, 23, 70, 26, 61, 34], [34, 82, 44, 84, 78, 56, 79, 54, 53, 45, 77, 74, 76, 21], [3, 19, 17, 79, 62, 33, 19, 86, 57, 31, 67, 1, 93, 75], [16, 99, 42, 94, 30, 59, 52, 77, 21, 74, 12, 39, 6, 49], [95, 97, 97, 1, 38, 11, 78, 62, 82, 34, 8, 47, 25, 12], [23, 32, 2, 12, 3, 4, 20, 67, 68, 16, 15, 2, 51, 88], [62, 34, 46, 74, 59, 68, 92, 82, 32, 90, 69, 78, 82, 33]]
        start = 12
        quarantine = [1, 8, 4, 2, 5, 1, 4, 5, 6, 7, 1, 2, 8, 9]
        solution = 466
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase28(self):
        profit = [[68, 85, 86], [42, 91, 72], [33, 51, 21], [96, 73, 55], [53, 50, 76]]
        start = 1
        quarantine = [1, 2, 3]
        solution = 350
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase29(self):
        profit = [[60, 36, 54, 43, 35, 69, 99, 63, 25, 55, 61, 44, 46, 27, 47, 15, 62, 33, 86, 27], [55, 36, 53, 71, 51, 86, 91, 15, 81, 100, 19, 79, 59, 95, 40, 54, 92, 93, 57, 13], [50, 51, 42, 20, 2, 62, 79, 60, 53, 23, 30, 62, 65, 7, 71, 64, 17, 41, 59, 28], [0, 26, 99, 11, 1, 38, 17, 66, 95, 64, 61, 1, 34, 88, 36, 5, 13, 30, 92, 96], [70, 43, 20, 65, 40, 88, 71, 38, 18, 6, 19, 48, 39, 77, 44, 88, 93, 44, 99, 10], [44, 9, 1, 98, 1, 93, 13, 81, 25, 53, 41, 21, 42, 0, 32, 28, 63, 34, 50, 24], [4, 67, 2, 30, 76, 100, 25, 27, 51, 58, 45, 50, 88, 30, 1, 97, 52, 88, 59, 43], [55, 79, 5, 12, 84, 10, 16, 41, 36, 63, 99, 55, 57, 8, 27, 11, 25, 8, 36, 17], [96, 48, 28, 86, 76, 26, 11, 56, 5, 68, 30, 84, 12, 25, 28, 72, 13, 25, 96, 28], [10, 6, 9, 28, 15, 96, 90, 4, 13, 70, 54, 70, 84, 78, 56, 9, 43, 43, 84, 27]]
        start = 12
        quarantine = [9, 7, 1, 7, 3, 5, 0, 1, 2, 4, 2, 6, 4, 7, 3, 4, 1, 5, 4, 9]
        solution = 526
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase30(self):
        profit = [[16, 26, 63, 79, 35, 87, 12, 41, 44, 99, 70, 11, 54, 16, 11, 60, 72, 89, 89, 26, 77, 32, 47, 48, 48], [66, 81, 14, 47, 58, 52, 28, 9, 33, 19, 24, 33, 65, 70, 12, 67, 48, 86, 98, 77, 1, 55, 70, 97, 70], [74, 23, 29, 91, 43, 68, 60, 71, 51, 56, 69, 59, 17, 76, 94, 97, 61, 92, 77, 62, 88, 17, 71, 46, 76], [75, 29, 43, 77, 28, 71, 88, 13, 58, 16, 58, 12, 71, 21, 69, 4, 91, 28, 21, 16, 55, 66, 16, 68, 33], [29, 13, 2, 5, 75, 33, 62, 100, 43, 3, 41, 77, 23, 91, 89, 79, 94, 32, 41, 47, 45, 74, 76, 80, 20], [60, 100, 83, 3, 47, 23, 22, 71, 28, 45, 61, 66, 13, 44, 27, 64, 72, 33, 39, 27, 16, 15, 96, 50, 49], [46, 100, 76, 7, 78, 14, 42, 68, 54, 16, 11, 84, 89, 5, 70, 9, 32, 78, 85, 14, 61, 17, 22, 56, 79]]
        start = 24
        quarantine = [6, 0, 5, 7, 4, 0, 6, 0, 7, 6, 3, 6, 0, 0, 6, 0, 1, 6, 3, 5, 5, 2, 7, 3, 2]
        solution = 375
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase31(self):
        profit = [[0, 92, 5, 61, 50, 23, 71, 71, 78, 91, 67, 19, 51], [47, 51, 34, 68, 16, 98, 87, 86, 27, 28, 97, 64, 70], [35, 94, 0, 38, 88, 35, 92, 14, 55, 83, 26, 9, 42], [46, 45, 47, 5, 1, 51, 13, 67, 85, 73, 59, 100, 51], [35, 57, 16, 36, 90, 98, 87, 12, 19, 22, 35, 44, 81], [32, 45, 55, 29, 31, 94, 17, 5, 59, 65, 33, 8, 39], [52, 7, 38, 70, 16, 88, 64, 90, 70, 25, 9, 83, 29], [14, 0, 34, 57, 24, 44, 65, 38, 3, 77, 31, 2, 25], [9, 84, 63, 74, 13, 33, 24, 88, 23, 69, 76, 25, 66], [76, 76, 49, 8, 50, 19, 32, 22, 92, 27, 7, 57, 31]]
        start = 8
        quarantine = [4, 4, 10, 2, 3, 9, 7, 8, 7, 9, 6, 0, 8]
        solution = 511
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase32(self):
        profit = [[1, 79, 8, 46, 42, 54, 15, 40, 28, 22, 38, 72, 65, 60, 27, 73], [41, 5, 63, 15, 82, 24, 17, 74, 13, 57, 23, 64, 85, 21, 60, 39], [10, 64, 15, 54, 12, 91, 9, 64, 1, 69, 33, 32, 24, 34, 12, 15], [8, 51, 8, 83, 29, 20, 33, 74, 62, 74, 92, 75, 63, 94, 37, 42], [15, 65, 3, 14, 24, 90, 91, 85, 63, 42, 3, 49, 2, 99, 46, 40], [25, 21, 60, 80, 11, 73, 44, 7, 39, 36, 23, 91, 3, 31, 47, 92], [75, 94, 20, 15, 51, 46, 18, 41, 79, 83, 45, 100, 42, 51, 38, 16], [8, 84, 77, 24, 40, 14, 53, 98, 98, 53, 23, 91, 75, 9, 16, 35], [70, 82, 11, 94, 49, 80, 35, 28, 4, 3, 59, 98, 48, 72, 5, 58], [86, 62, 59, 100, 24, 64, 84, 12, 18, 55, 43, 11, 11, 3, 80, 60]]
        start = 11
        quarantine = [5, 7, 0, 6, 8, 9, 0, 0, 8, 0, 9, 10, 1, 2, 8, 7]
        solution = 683
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase33(self):
        profit = [[86, 14, 11, 62, 38, 17, 95, 81, 39, 80, 86, 61, 87, 85], [6, 40, 80, 69, 33, 15, 73, 54, 64, 45, 53, 18, 2, 40]]
        start = 13
        quarantine = [2, 2, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 2, 1]
        solution = 125
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase34(self):
        profit = [[78, 13, 58, 54, 82, 100, 11, 95, 31, 37, 32, 90, 54, 95, 10, 55, 28], [0, 10, 79, 38, 17, 73, 96, 9, 89, 53, 50, 68, 85, 27, 8, 77, 34]]
        start = 7
        quarantine = [1, 0, 1, 0, 0, 2, 1, 0, 2, 0, 1, 1, 2, 1, 0, 1, 0]
        solution = 104
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase35(self):
        profit = [[26, 64, 35, 26, 79, 92, 49, 72, 66, 87, 97, 97, 94, 42, 67, 78, 59, 1, 34, 30, 66, 45], [12, 15, 24, 33, 53, 56, 100, 77, 28, 40, 26, 99, 100, 60, 44, 98, 0, 20, 58, 38, 8, 16], [57, 38, 65, 88, 78, 42, 99, 34, 28, 14, 88, 52, 51, 83, 20, 39, 82, 50, 44, 51, 12, 15], [27, 1, 82, 97, 40, 76, 1, 44, 86, 14, 72, 26, 40, 31, 23, 36, 61, 58, 13, 55, 21, 28], [8, 2, 24, 17, 26, 27, 72, 82, 68, 26, 16, 23, 25, 19, 44, 91, 34, 57, 6, 45, 89, 64], [73, 99, 49, 86, 10, 70, 25, 34, 63, 52, 46, 47, 2, 50, 80, 47, 33, 5, 18, 51, 67, 91], [14, 30, 49, 7, 42, 21, 29, 32, 25, 22, 48, 18, 15, 36, 11, 60, 5, 63, 96, 28, 70, 44], [28, 30, 14, 53, 71, 60, 80, 34, 12, 65, 88, 96, 39, 8, 33, 27, 41, 43, 30, 51, 96, 62]]
        start = 1
        quarantine = [3, 3, 3, 7, 1, 8, 2, 5, 4, 5, 5, 4, 0, 3, 6, 3, 5, 2, 4, 4, 4, 7]
        solution = 279
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase36(self):
        profit = [  [77, 39, 30, 54, 82, 77, 17, 27, 73, 72, 75, 54, 29, 45, 89, 78, 60, 3, 12, 57], 
                    [43, 76, 67, 69, 77, 42, 42, 44, 84, 98, 84, 34, 94, 94, 93, 72, 32, 62, 94, 31],
                    [84, 46, 75, 32, 21, 45, 25, 50, 55, 73, 8, 10, 55, 61, 68, 82, 59, 51, 81, 80],
                    [37, 81, 91, 63, 65, 65, 93, 85, 86, 93, 5, 41, 52, 13, 87, 79, 38, 66, 98, 75],
                    [36, 48, 32, 89, 90, 73, 9, 13, 98, 11, 29, 21, 8, 21, 85, 32, 33, 35, 35, 81],
                    [66, 53, 6, 62, 28, 8, 72, 47, 28, 37, 30, 47, 77, 79, 67, 76, 37, 39, 8, 59],
                    [86, 9, 30, 48, 12, 82, 32, 32, 0, 53, 47, 47, 13, 44, 84, 37, 51, 49, 68, 36],
                    [12, 86, 18, 24, 85, 52, 84, 11, 48, 97, 36, 60, 67, 62, 72, 100, 54, 8, 75, 97],
                    [90, 98, 45, 27, 49, 49, 70, 45, 37, 75, 73, 6, 6, 64, 8, 35, 79, 65, 60, 0],
                    [8, 39, 36, 18, 25, 60, 56, 1, 17, 80, 11, 16, 88, 80, 21, 64, 68, 89, 91, 38]]
        start = 11
        quarantine = [5, 2, 9, 8, 6, 2, 0, 7, 9, 9, 0, 10, 10, 5, 0, 2, 1, 3, 10, 9]
        solution = 424
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase37(self):
        profit = [[85, 23, 62, 83, 97, 88, 24, 74, 98, 99, 22], [0, 19, 40, 33, 34, 24, 26, 46, 24, 72, 71], [40, 81, 60, 67, 73, 87, 46, 27, 44, 37, 98], [57, 85, 49, 33, 22, 21, 85, 22, 15, 6, 8], [36, 11, 85, 69, 67, 37, 81, 87, 37, 5, 92]]
        start = 0
        quarantine = [1, 1, 5, 0, 4, 5, 2, 1, 4, 5, 1]
        solution = 218
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase38(self):
        profit = [[94, 2, 36, 37, 1, 72, 13, 27, 16, 24], [72, 46, 20, 94, 60, 16, 74, 79, 23, 39], [20, 55, 79, 41, 14, 97, 23, 49, 55, 27], [95, 76, 5, 76, 96, 39, 84, 74, 50, 45], [29, 79, 8, 15, 16, 2, 42, 41, 23, 84], [93, 24, 30, 66, 30, 81, 69, 100, 54, 20]]
        start = 7
        quarantine = [6, 6, 5, 2, 4, 3, 4, 5, 2, 2]
        solution = 370
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase39(self):
        profit = [[21, 60, 89, 26, 92, 20, 67, 56, 27, 45, 26, 77, 24, 17, 96, 45, 43, 34, 34, 8, 91, 66, 67, 65, 6, 38, 44], [39, 48, 67, 24, 77, 50, 41, 57, 70, 21, 26, 1, 23, 27, 94, 61, 31, 10, 61, 89, 49, 89, 2, 82, 71, 43, 98], [36, 7, 21, 13, 35, 0, 56, 19, 63, 43, 52, 67, 44, 99, 12, 77, 2, 30, 68, 12, 92, 94, 57, 72, 67, 85, 62], [2, 65, 70, 67, 28, 52, 69, 4, 98, 79, 40, 52, 38, 37, 15, 4, 67, 94, 62, 0, 76, 95, 79, 0, 24, 83, 52], [89, 31, 87, 64, 76, 78, 12, 45, 63, 81, 2, 34, 95, 68, 1, 34, 91, 62, 82, 87, 26, 71, 38, 88, 11, 47, 25], [8, 70, 14, 18, 41, 0, 20, 32, 74, 9, 63, 61, 48, 21, 52, 75, 75, 51, 93, 45, 14, 56, 0, 23, 39, 22, 51], [6, 11, 57, 25, 16, 26, 63, 86, 56, 8, 75, 86, 0, 1, 33, 11, 5, 24, 88, 69, 0, 11, 47, 84, 93, 68, 36]]
        start = 10
        quarantine = [0, 6, 4, 2, 3, 2, 3, 7, 5, 1, 2, 7, 5, 1, 5, 6, 3, 7, 1, 1, 5, 7, 7, 7, 6, 6, 6]
        solution = 284
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase40(self):
        profit = [[56, 90, 77, 51, 86, 75, 94, 58, 74, 51, 67, 20], [2, 45, 3, 56, 39, 49, 22, 13, 66, 77, 10, 86], [6, 49, 59, 74, 1, 54, 30, 62, 93, 74, 70, 75], [76, 23, 37, 78, 86, 72, 24, 73, 59, 81, 95, 54], [97, 5, 4, 0, 76, 96, 38, 26, 72, 18, 53, 19], [0, 76, 51, 89, 41, 72, 40, 45, 91, 31, 8, 46], [0, 14, 7, 66, 86, 6, 69, 19, 51, 31, 0, 34], [61, 62, 84, 65, 80, 36, 16, 69, 94, 74, 82, 92]]
        start = 7
        quarantine = [0, 5, 4, 8, 5, 3, 3, 2, 8, 5, 2, 8]
        solution = 365
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase41(self):
        profit = [[79, 85, 83, 39, 73, 85, 42, 88, 55, 53, 47, 52, 98, 100, 59, 87, 80, 77, 13, 73, 18, 67, 43, 84, 91]]
        start = 24
        quarantine = [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0]
        solution = 91
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase42(self):
        profit = [[99, 68, 22, 95, 78, 98, 31, 36, 45, 93, 2, 53, 97, 59, 54, 41, 49, 10, 57, 63, 99, 84, 82, 94], [100, 14, 55, 35, 53, 29, 14, 80, 80, 43, 88, 78, 11, 53, 86, 60, 0, 82, 92, 99, 21, 54, 77, 70], [23, 68, 16, 98, 67, 42, 92, 10, 17, 16, 45, 40, 25, 51, 3, 76, 90, 48, 86, 54, 3, 86, 56, 92], [78, 90, 57, 81, 6, 50, 85, 67, 3, 38, 36, 33, 13, 31, 61, 16, 4, 97, 71, 36, 69, 96, 72, 40], [5, 54, 97, 21, 42, 35, 12, 20, 27, 58, 29, 28, 6, 73, 13, 90, 0, 46, 79, 51, 89, 65, 2, 38], [43, 11, 22, 70, 74, 68, 1, 2, 33, 44, 54, 100, 65, 1, 72, 15, 62, 72, 53, 39, 75, 59, 34, 11], [72, 81, 12, 28, 57, 94, 81, 56, 91, 66, 83, 32, 98, 17, 54, 16, 39, 89, 62, 45, 17, 17, 41, 30], [72, 12, 97, 8, 29, 85, 26, 62, 15, 50, 16, 72, 63, 91, 51, 91, 6, 67, 3, 7, 4, 52, 17, 98], [11, 10, 41, 53, 67, 0, 87, 95, 72, 88, 75, 7, 33, 18, 55, 82, 59, 88, 48, 56, 18, 74, 86, 88]]
        start = 20
        quarantine = [1, 8, 5, 5, 1, 3, 5, 8, 6, 9, 3, 1, 5, 6, 0, 5, 0, 8, 0, 5, 2, 9, 0, 4]
        solution = 442
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase43(self):
        profit = [[61, 55, 65, 90, 59, 10, 43, 3, 78, 32, 37, 3, 33, 70, 17, 46, 97, 21, 65, 59, 38, 30, 41, 14, 45, 78, 61], [88, 24, 63, 74, 51, 72, 81, 53, 4, 4, 2, 75, 81, 90, 93, 46, 96, 48, 30, 5, 86, 83, 49, 0, 9, 65, 2], [56, 34, 53, 45, 34, 75, 44, 72, 65, 29, 78, 14, 91, 58, 80, 91, 97, 6, 80, 70, 18, 12, 16, 31, 19, 13, 9]]
        start = 15
        quarantine = [3, 1, 2, 2, 2, 0, 2, 0, 3, 0, 0, 1, 0, 0, 3, 0, 1, 3, 1, 0, 0, 2, 3, 3, 0, 3, 3]
        solution = 183
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase44(self):
        profit = [[41, 72, 15, 50, 85, 17, 24, 18, 6, 79, 89], [71, 44, 34, 36, 72, 5, 33, 73, 58, 92, 54], [94, 63, 24, 99, 59, 1, 71, 82, 54, 72, 97], [57, 15, 61, 53, 35, 86, 79, 98, 18, 96, 96], [61, 35, 47, 68, 29, 90, 14, 78, 68, 43, 22], [76, 0, 60, 39, 2, 3, 52, 37, 68, 53, 80], [37, 71, 72, 18, 41, 25, 59, 70, 10, 94, 50], [86, 13, 5, 84, 28, 36, 47, 75, 100, 33, 17]]
        start = 7
        quarantine = [5, 5, 7, 7, 7, 7, 3, 2, 2, 2, 7]
        solution = 531
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase45(self):
        profit = [[58, 97, 28, 40, 89, 68, 19], [0, 57, 96, 83, 2, 97, 92], [45, 8, 21, 35, 4, 87, 16]]
        start = 5
        quarantine = [1, 0, 2, 2, 2, 3, 3]
        solution = 252
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase46(self):
        profit = [[55, 96, 79, 8, 46, 17, 3, 66, 66], [81, 38, 28, 26, 82, 4, 91, 68, 41], [28, 89, 2, 56, 5, 66, 76, 29, 77]]
        start = 6
        quarantine = [0, 1, 2, 3, 1, 1, 0, 0, 0]
        solution = 170
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase47(self):
        profit = [[3, 84, 39, 37, 17, 40, 65, 95, 46, 75, 71, 59, 100, 22, 17, 51, 75, 16, 43, 81, 9, 53, 32, 66, 46, 86, 7, 56, 68, 18], [96, 62, 28, 26, 18, 26, 56, 25, 2, 52, 95, 84, 90, 50, 86, 78, 100, 70, 80, 41, 83, 51, 86, 35, 94, 44, 6, 58, 78, 83], [59, 78, 43, 91, 48, 40, 0, 25, 8, 73, 9, 27, 16, 36, 57, 64, 95, 26, 25, 77, 75, 84, 81, 62, 49, 21, 15, 88, 90, 73], [100, 51, 11, 36, 11, 93, 76, 52, 82, 91, 85, 41, 29, 83, 71, 95, 49, 98, 69, 30, 42, 94, 42, 2, 22, 68, 86, 85, 23, 22], [94, 23, 92, 61, 20, 91, 42, 14, 0, 80, 36, 24, 16, 58, 33, 51, 32, 28, 35, 4, 56, 15, 18, 81, 56, 97, 63, 55, 41, 73], [52, 81, 86, 64, 12, 68, 83, 22, 77, 40, 58, 76, 95, 62, 14, 70, 99, 42, 9, 94, 99, 41, 12, 83, 60, 14, 48, 2, 72, 63], [39, 71, 35, 96, 77, 52, 6, 63, 86, 87, 49, 19, 8, 67, 55, 47, 21, 85, 47, 50, 47, 51, 41, 63, 66, 62, 81, 24, 46, 37], [34, 85, 70, 99, 29, 8, 77, 71, 59, 7, 68, 13, 20, 85, 73, 28, 62, 39, 59, 77, 68, 17, 54, 29, 80, 81, 52, 64, 54, 66]]
        start = 19
        quarantine = [3, 3, 5, 4, 3, 5, 6, 3, 3, 6, 7, 7, 3, 7, 4, 4, 5, 6, 6, 7, 0, 3, 1, 4, 8, 4, 6, 6, 8, 1]
        solution = 470
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase48(self):
        profit = [[75, 24, 13, 29, 51, 82, 74, 97, 67, 83, 96, 61, 81, 40, 74, 55, 3], [95, 26, 40, 83, 90, 88, 76, 64, 71, 83, 3, 38, 76, 63, 16, 68, 4], [66, 82, 90, 12, 64, 14, 9, 72, 83, 17, 83, 51, 97, 90, 32, 92, 4], [69, 29, 5, 92, 19, 81, 46, 10, 7, 10, 64, 100, 30, 69, 47, 18, 81], [53, 0, 33, 17, 100, 52, 93, 20, 62, 35, 21, 72, 78, 90, 45, 11, 78], [2, 34, 92, 49, 53, 82, 34, 69, 25, 46, 93, 78, 9, 3, 61, 73, 18], [51, 54, 76, 94, 20, 88, 71, 25, 38, 50, 27, 66, 84, 83, 7, 71, 11], [58, 60, 37, 69, 38, 93, 9, 2, 15, 89, 31, 91, 16, 88, 69, 100, 13], [33, 84, 48, 61, 39, 65, 16, 0, 36, 84, 91, 57, 91, 47, 56, 14, 63]]
        start = 13
        quarantine = [0, 6, 5, 7, 2, 3, 5, 3, 0, 4, 4, 7, 7, 5, 4, 3, 8]
        solution = 573
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase49(self):
        profit = [[6, 37, 53, 36], [37, 23, 100, 61], [65, 39, 98, 57], [11, 86, 39, 55], [88, 77, 22, 29], [74, 49, 46, 60], [4, 56, 68, 93]]
        start = 1
        quarantine = [3, 7, 6, 1]
        solution = 367
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase50(self):
        profit = [[29, 65], [61, 42], [40, 50], [46, 65]]
        start = 1
        quarantine = [1, 1]
        solution = 222
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase51(self):
        profit = [[7, 62, 60, 2, 28, 19, 33, 92, 77, 50, 58, 85, 36, 34, 49, 76, 69, 32, 41, 2, 82], [36, 90, 55, 100, 29, 27, 11, 36, 32, 36, 91, 51, 12, 15, 15, 100, 83, 68, 56, 61, 9], [40, 16, 93, 59, 20, 31, 74, 92, 72, 0, 32, 47, 49, 59, 33, 82, 85, 58, 15, 71, 1], [99, 15, 74, 53, 84, 96, 87, 39, 51, 21, 53, 1, 63, 4, 19, 29, 11, 98, 73, 71, 96], [88, 52, 80, 22, 49, 47, 92, 30, 36, 70, 88, 61, 10, 53, 48, 85, 44, 76, 74, 64, 97], [49, 7, 7, 58, 80, 85, 76, 91, 98, 81, 52, 12, 46, 3, 29, 89, 93, 8, 87, 26, 14]]
        start = 7
        quarantine = [0, 4, 2, 4, 2, 5, 2, 1, 1, 0, 5, 5, 4, 0, 5, 4, 1, 6, 4, 3, 6]
        solution = 380
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase52(self):
        profit = [[27, 90, 68, 50, 89, 13, 18], [21, 2, 45, 59, 94, 67, 58], [32, 22, 51, 76, 73, 63, 43], [41, 34, 13, 25, 7, 13, 0], [87, 50, 64, 70, 12, 2, 15], [22, 41, 53, 66, 95, 89, 60], [58, 38, 24, 15, 87, 23, 48], [1, 73, 1, 74, 48, 41, 62], [8, 37, 36, 27, 6, 15, 80]]
        start = 2
        quarantine = [3, 1, 3, 2, 4, 7, 7]
        solution = 355
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase53(self):
        profit = [[83, 28, 24, 38, 78, 26, 67], [81, 28, 16, 6, 61, 19, 18], [9, 47, 50, 30, 2, 52, 48]]
        start = 3
        quarantine = [2, 1, 2, 2, 2, 3, 3]
        solution = 74
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase54(self):
        profit = [[48, 54, 73, 16, 12, 9, 15, 19, 63, 7, 22, 75, 61, 22, 74, 30, 95, 14, 18, 7, 8, 18, 17, 51, 97, 45, 98], [25, 20, 77, 35, 89, 76, 53, 40, 62, 83, 58, 56, 100, 75, 72, 43, 59, 14, 37, 51, 65, 63, 78, 65, 71, 84, 68]]
        start = 14
        quarantine = [2, 1, 0, 1, 2, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 0, 2, 1, 2, 0, 2, 2, 1, 2, 1, 2, 1]
        solution = 146
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase55(self):
        profit = [[100, 64, 54, 84, 18, 80, 6, 78, 71]]
        start = 0
        quarantine = [0, 1, 0, 0, 0, 1, 0, 1, 0]
        solution = 100
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase56(self):
        profit = [[36, 75], [53, 75], [92, 76], [27, 10], [95, 12], [8, 69], [11, 80]]
        start = 0
        quarantine = [5, 5]
        solution = 322
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase57(self):
        profit = [[29, 33, 23, 92, 40, 96, 12, 30, 84, 26, 87, 26, 54, 16, 92, 21, 92, 30, 54, 29], [18, 94, 94, 27, 55, 59, 34, 89, 47, 80, 91, 71, 13, 93, 7, 64, 87, 68, 97, 52], [17, 47, 6, 30, 91, 54, 95, 46, 92, 79, 88, 57, 28, 77, 83, 37, 32, 89, 80, 1], [12, 74, 17, 36, 12, 40, 26, 14, 84, 58, 99, 37, 77, 23, 48, 44, 97, 18, 80, 21], [14, 84, 12, 58, 100, 12, 87, 95, 20, 100, 28, 33, 8, 4, 8, 47, 53, 34, 69, 84], [91, 91, 46, 58, 41, 85, 23, 98, 89, 54, 55, 51, 51, 11, 96, 23, 72, 8, 49, 9], [0, 18, 1, 23, 38, 63, 2, 83, 61, 29, 43, 88, 94, 100, 77, 42, 7, 17, 35, 49], [99, 45, 80, 42, 29, 13, 34, 37, 7, 23, 63, 96, 72, 8, 60, 66, 51, 83, 79, 37], [87, 79, 47, 86, 23, 12, 6, 74, 76, 46, 51, 14, 72, 25, 98, 24, 10, 0, 17, 66], [38, 56, 67, 3, 51, 71, 28, 63, 23, 59, 71, 87, 96, 91, 92, 2, 50, 77, 79, 39]]
        start = 7
        quarantine = [6, 10, 8, 3, 5, 7, 1, 7, 2, 9, 5, 6, 7, 7, 2, 10, 4, 5, 3, 3]
        solution = 629
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase58(self):
        profit = [[75, 18, 84, 98, 78, 70, 94, 33, 51, 84, 58, 97, 95, 42, 2, 13, 6], [16, 50, 61, 71, 15, 60, 11, 25, 1, 87, 53, 6, 91, 10, 4, 18, 3]]
        start = 13
        quarantine = [2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 2, 1, 0, 1, 1, 1, 0]
        solution = 91 
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase59(self):
        profit = [[8, 53, 75, 39, 50, 70, 81, 53, 76, 41, 32, 10, 46, 12, 73, 58, 4, 17, 32, 27, 41, 15, 92, 96, 53], [41, 56, 17, 45, 99, 68, 8, 95, 48, 36, 58, 6, 80, 58, 10, 58, 6, 37, 63, 5, 74, 24, 59, 0, 61], [75, 69, 20, 27, 17, 71, 90, 4, 12, 7, 80, 88, 34, 55, 85, 71, 76, 74, 81, 41, 5, 44, 24, 97, 5], [65, 61, 95, 66, 27, 98, 24, 46, 17, 19, 34, 11, 79, 60, 28, 5, 69, 56, 65, 62, 83, 32, 67, 62, 11], [90, 78, 97, 88, 4, 90, 38, 11, 78, 43, 78, 36, 33, 95, 50, 18, 50, 13, 83, 59, 99, 16, 72, 9, 50], [17, 89, 22, 96, 41, 8, 42, 91, 43, 94, 90, 48, 64, 47, 59, 62, 7, 43, 0, 54, 16, 16, 84, 30, 46], [21, 95, 82, 67, 46, 45, 6, 9, 55, 2, 17, 100, 73, 13, 56, 79, 88, 96, 4, 39, 1, 26, 85, 53, 29], [81, 39, 9, 37, 65, 14, 27, 59, 29, 70, 52, 73, 81, 64, 58, 58, 62, 59, 39, 94, 2, 22, 69, 18, 49], [16, 61, 87, 49, 52, 74, 79, 22, 23, 57, 66, 72, 36, 63, 13, 78, 28, 12, 92, 41, 97, 33, 35, 48, 76], [53, 23, 34, 86, 44, 43, 76, 98, 53, 16, 79, 99, 11, 63, 73, 87, 65, 26, 13, 16, 88, 33, 15, 2, 24]]
        start = 0
        quarantine = [4, 3, 3, 2, 4, 10, 2, 3, 2, 4, 5, 4, 9, 10, 1, 10, 4, 2, 4, 7, 5, 8, 7, 2, 6]
        solution = 467
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase60(self):
        profit = [[48, 20, 89, 50, 77, 8, 28, 22, 50, 65, 70, 50, 81, 24, 13, 36, 71, 34, 93, 3, 79, 88, 74], [16, 43, 72, 69, 65, 83, 18, 5, 24, 46, 100, 16, 47, 71, 84, 83, 26, 30, 10, 40, 38, 21, 25], [93, 70, 21, 22, 86, 1, 6, 46, 82, 93, 71, 71, 71, 70, 43, 87, 81, 13, 4, 41, 15, 11, 34], [37, 61, 13, 73, 26, 3, 3, 83, 3, 19, 80, 35, 82, 32, 50, 14, 3, 32, 40, 7, 18, 83, 4], [34, 86, 64, 2, 18, 83, 21, 65, 61, 51, 47, 82, 31, 40, 48, 81, 52, 88, 66, 31, 37, 99, 50], [67, 13, 96, 62, 47, 49, 57, 65, 78, 89, 10, 42, 0, 90, 52, 45, 12, 42, 99, 28, 63, 5, 21], [87, 38, 14, 89, 6, 22, 63, 10, 31, 52, 98, 82, 79, 66, 61, 73, 61, 73, 39, 54, 94, 63, 1]]
        start = 22
        quarantine = [0, 3, 6, 6, 1, 7, 5, 7, 3, 6, 7, 5, 1, 7, 6, 2, 3, 0, 4, 6, 0, 1, 6]
        solution = 350
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase61(self):
        profit = [[10, 30, 96, 24, 8, 10, 74, 1, 76, 56, 20], [61, 90, 8, 79, 53, 89, 90, 41, 21, 21, 92], [96, 9, 23, 93, 15, 79, 42, 71, 80, 89, 63], [56, 62, 19, 65, 2, 4, 61, 7, 52, 91, 42], [41, 93, 34, 5, 34, 98, 40, 79, 85, 15, 57], [30, 0, 7, 37, 89, 44, 33, 93, 100, 73, 59], [19, 1, 39, 41, 45, 17, 57, 29, 54, 87, 55]]
        start = 7
        quarantine = [4, 0, 3, 3, 4, 1, 1, 2, 3, 6, 6]
        solution = 321
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase62(self):
        profit = [[58, 94, 90, 13, 66, 3, 25, 28, 90, 20, 1], [14, 58, 5, 27, 85, 30, 54, 24, 23, 77, 53], [59, 40, 91, 45, 27, 86, 57, 95, 82, 25, 81], [87, 99, 16, 61, 21, 28, 60, 21, 67, 77, 32], [87, 21, 80, 96, 10, 77, 43, 37, 7, 72, 80], [81, 79, 90, 41, 16, 6, 98, 64, 94, 37, 37], [27, 35, 2, 47, 94, 51, 91, 14, 98, 66, 73]]
        start = 9
        quarantine = [7, 0, 3, 6, 3, 4, 2, 3, 3, 1, 7]
        solution = 374
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase63(self):
        profit = [[40, 52, 5, 84, 43], [56, 9, 8, 81, 27], [55, 10, 45, 55, 99], [20, 66, 67, 23, 62], [62, 77, 42, 53, 79], [29, 99, 38, 30, 77], [31, 9, 38, 39, 69], [4, 31, 62, 96, 48], [42, 5, 93, 68, 17]]
        start = 0
        quarantine = [5, 3, 2, 9, 8]
        solution = 339
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase64(self):
        profit = [[67, 73, 72, 11, 51, 80, 24, 86, 31, 91, 75, 51, 30, 29], [67, 31, 100, 99, 65, 50, 60, 100, 56, 37, 71, 100, 78, 80], [99, 71, 83, 29, 54, 8, 34, 8, 90, 3, 59, 0, 78, 71], [20, 27, 52, 16, 52, 90, 16, 86, 60, 58, 89, 98, 0, 80], [6, 78, 1, 96, 81, 61, 23, 70, 97, 29, 5, 27, 35, 88], [70, 6, 40, 20, 88, 74, 51, 93, 37, 50, 57, 88, 34, 94], [40, 13, 56, 82, 67, 67, 11, 22, 59, 26, 62, 99, 48, 90], [96, 90, 6, 65, 91, 44, 91, 65, 96, 52, 62, 63, 96, 66], [40, 5, 66, 3, 1, 43, 71, 57, 45, 9, 55, 5, 61, 50]]
        start = 11
        quarantine = [4, 4, 6, 5, 8, 6, 5, 8, 8, 5, 1, 8, 8, 4]
        solution = 531
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase65(self):
        profit = [[68, 25, 43, 98, 34], [31, 70, 74, 79, 67]]
        start = 2
        quarantine = [0, 1, 2, 2, 1]
        solution = 117
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase66(self):
        profit = [[80, 50, 76, 87, 31, 49, 10, 16, 15, 96, 73, 96, 68, 30, 39, 86, 13, 45]]
        start = 10
        quarantine = [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1]
        solution = 73
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase67(self):
        profit = [[5, 3, 7]]
        start = 1
        quarantine = [0, 1, 0]
        solution = 3
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase68(self):
        profit = [[8, 76, 66, 3, 88, 35, 44, 29, 80, 51, 35, 20, 41, 31, 17, 0, 92, 60, 85, 15], [68, 5, 80, 12, 7, 32, 20, 63, 85, 84, 11, 15, 24, 76, 59, 22, 56, 70, 84, 21], [89, 73, 61, 20, 32, 26, 83, 100, 63, 68, 88, 93, 32, 84, 72, 1, 47, 35, 52, 66], [75, 56, 25, 65, 20, 75, 81, 80, 92, 20, 84, 45, 78, 4, 11, 37, 13, 76, 57, 12], [88, 97, 81, 45, 18, 60, 93, 61, 69, 26, 34, 66, 86, 47, 95, 61, 43, 23, 40, 56], [17, 37, 24, 84, 79, 56, 27, 19, 58, 1, 1, 95, 19, 43, 32, 72, 34, 19, 20, 6], [76, 65, 26, 39, 26, 44, 37, 53, 50, 0, 8, 40, 78, 47, 33, 6, 13, 57, 18, 9], [91, 59, 67, 50, 98, 4, 19, 98, 4, 54, 92, 20, 21, 54, 64, 14, 63, 22, 60, 91], [100, 33, 18, 91, 85, 20, 56, 44, 55, 93, 18, 83, 42, 52, 84, 52, 1, 27, 30, 27], [44, 77, 27, 4, 46, 44, 46, 70, 77, 75, 24, 60, 98, 30, 87, 88, 73, 31, 45, 8]]
        start = 4
        quarantine = [3, 0, 4, 7, 1, 4, 9, 2, 0, 5, 9, 1, 9, 0, 7, 0, 7, 10, 1, 8]
        solution = 499
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase69(self):
        profit = [[20, 58, 78, 6, 4, 21, 9, 58, 1, 71, 65, 61, 14, 20, 57, 68], [46, 52, 17, 13, 16, 3, 42, 34, 12, 79, 79, 2, 42, 23, 60, 94], [64, 66, 4, 45, 57, 7, 4, 53, 8, 45, 60, 20, 85, 28, 86, 74], [67, 27, 21, 97, 65, 41, 58, 96, 16, 29, 24, 50, 84, 47, 78, 36], [6, 63, 6, 44, 59, 52, 81, 94, 10, 36, 47, 17, 70, 67, 55, 19], [95, 65, 49, 91, 89, 60, 48, 42, 11, 31, 47, 38, 79, 70, 59, 21], [61, 29, 7, 68, 36, 0, 43, 21, 96, 27, 78, 94, 46, 49, 12, 3], [71, 59, 7, 39, 30, 64, 86, 74, 44, 74, 19, 25, 52, 98, 89, 46], [59, 22, 79, 87, 12, 36, 46, 87, 11, 26, 67, 77, 100, 1, 23, 73]]
        start = 14
        quarantine = [7, 9, 7, 9, 5, 5, 9, 1, 2, 5, 2, 6, 6, 0, 9, 6]
        solution = 519
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase70(self):
        profit = [[84, 7]]
        start = 1
        quarantine = [1, 0]
        solution = 7
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase71(self):
        profit = [[42, 79], [33, 24], [15, 61], [4, 88]]
        start = 1
        quarantine = [2, 3]
        solution = 252
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase72(self):
        profit = [[50], [44], [32], [27], [91], [98], [23], [58], [100]]
        start = 0
        quarantine = [7]
        solution = 523
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase73(self):
        profit = [[73, 19, 93, 13, 28, 18, 94, 89, 92, 31, 32], [22, 43, 3, 13, 86, 70, 57, 55, 65, 64, 72], [98, 42, 4, 6, 22, 74, 8, 36, 13, 45, 66], [42, 28, 33, 46, 56, 56, 45, 82, 99, 28, 99], [73, 32, 95, 22, 8, 24, 67, 7, 45, 38, 37], [18, 19, 71, 30, 63, 40, 13, 54, 33, 35, 42], [35, 25, 31, 76, 43, 90, 14, 36, 60, 42, 6], [48, 52, 83, 69, 2, 72, 49, 77, 61, 26, 77]]
        start = 4
        quarantine = [7, 2, 8, 3, 7, 4, 7, 2, 4, 0, 4]
        solution = 308
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase74(self):
        profit = [[47, 49, 2, 61, 52, 43, 59, 71, 98, 40, 33, 74, 58, 84, 50, 69, 9, 5, 40, 25, 50, 81, 58, 20, 29, 2, 78, 79, 34, 38], [12, 84, 37, 36, 97, 95, 87, 54, 67, 85, 11, 0, 93, 26, 11, 81, 84, 92, 37, 95, 51, 41, 89, 68, 97, 44, 95, 45, 62, 38], [25, 61, 79, 36, 12, 42, 94, 50, 52, 100, 64, 6, 77, 30, 16, 13, 58, 85, 15, 66, 80, 52, 94, 12, 93, 92, 32, 55, 41, 92], [33, 69, 55, 7, 70, 48, 61, 91, 33, 60, 100, 30, 29, 91, 2, 71, 60, 64, 28, 89, 30, 72, 85, 70, 53, 64, 26, 72, 90, 42], [3, 92, 24, 0, 64, 51, 62, 83, 61, 86, 17, 93, 5, 92, 32, 49, 94, 64, 73, 71, 86, 7, 94, 0, 14, 51, 15, 58, 7, 95]]
        start = 21
        quarantine = [5, 1, 3, 0, 1, 3, 1, 1, 4, 0, 2, 0, 3, 0, 5, 2, 3, 3, 0, 3, 0, 1, 3, 1, 1, 0, 2, 2, 2, 5]
        solution = 277
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase75(self):
        profit = [[57, 74, 66, 69, 48, 38, 64, 46, 60, 60, 29, 29, 88, 24, 83, 33, 80, 83, 55], [44, 28, 82, 6, 41, 46, 100, 82, 56, 60, 37, 73, 95, 19, 8, 31, 15, 55, 73], [13, 89, 51, 86, 81, 97, 22, 53, 60, 58, 2, 47, 47, 33, 100, 12, 99, 59, 92], [22, 36, 41, 33, 99, 20, 8, 100, 24, 47, 1, 83, 63, 2, 14, 80, 29, 73, 41]]
        start = 15
        quarantine = [0, 0, 4, 2, 1, 2, 4, 1, 0, 0, 2, 3, 2, 0, 1, 1, 2, 0, 0]
        solution = 156
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase76(self):
        profit = [[21, 22, 92], [5, 70, 3], [73, 94, 33], [47, 56, 59], [30, 61, 19]]
        start = 0
        quarantine = [0, 0, 1]
        solution = 281
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase77(self):
        profit = [[65, 6, 73, 14, 34, 93, 14, 6, 100, 9, 38, 71, 51, 11, 88, 71, 40, 49, 53, 68]]
        start = 15
        quarantine = [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0]
        solution = 71
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase78(self):
        profit = [[9, 70, 56, 94, 12, 20, 27, 18, 16, 3, 45, 86, 83, 30, 11, 60, 5], [84, 66, 92, 44, 33, 16, 57, 53, 30, 91, 54, 73, 39, 54, 51, 9, 46], [55, 95, 35, 22, 78, 73, 40, 5, 34, 75, 6, 100, 69, 10, 35, 10, 71], [17, 77, 93, 100, 54, 38, 96, 32, 74, 27, 47, 100, 51, 20, 14, 26, 45], [62, 16, 3, 58, 30, 1, 43, 50, 34, 89, 67, 76, 28, 39, 86, 85, 68], [24, 14, 94, 69, 83, 97, 52, 36, 19, 46, 49, 72, 21, 50, 20, 13, 81], [10, 57, 92, 91, 36, 55, 67, 38, 93, 80, 62, 99, 56, 35, 97, 25, 2], [68, 38, 85, 34, 75, 9, 81, 5, 52, 7, 23, 51, 10, 74, 2, 67, 16], [40, 20, 97, 68, 1, 17, 47, 78, 86, 36, 85, 40, 98, 17, 75, 20, 6]]
        start = 8
        quarantine = [7, 6, 0, 1, 2, 5, 6, 2, 9, 7, 4, 0, 8, 7, 0, 7, 1]
        solution = 438
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase79(self):
        profit = [[77, 16, 64, 72, 14, 92, 56, 73, 48, 41, 35, 33, 74, 96, 52, 95, 96, 97, 84, 35, 61, 19, 67], [83, 16, 7, 39, 73, 80, 55, 93, 11, 97, 31, 29, 17, 52, 17, 43, 7, 17, 12, 3, 44, 41, 41], [70, 20, 23, 41, 18, 17, 73, 1, 73, 20, 90, 89, 20, 12, 88, 35, 55, 62, 56, 37, 16, 74, 44], [40, 54, 46, 61, 70, 54, 20, 32, 70, 53, 95, 70, 37, 23, 44, 40, 29, 61, 100, 32, 27, 63, 18], [0, 51, 86, 0, 7, 40, 91, 10, 67, 82, 22, 21, 24, 14, 33, 37, 91, 67, 92, 84, 74, 78, 55], [88, 58, 9, 5, 9, 68, 77, 33, 67, 77, 41, 37, 57, 33, 70, 14, 45, 12, 35, 100, 84, 60, 22], [26, 82, 57, 44, 6, 34, 18, 95, 38, 10, 99, 42, 42, 96, 52, 84, 39, 84, 66, 58, 92, 37, 73], [83, 20, 6, 22, 57, 21, 22, 51, 97, 92, 31, 38, 24, 68, 2, 15, 13, 32, 9, 73, 76, 99, 41], [100, 63, 35, 32, 67, 84, 28, 3, 94, 5, 10, 0, 64, 51, 25, 45, 57, 48, 71, 10, 39, 83, 3]]
        start = 20
        quarantine = [2, 8, 4, 5, 8, 4, 8, 5, 3, 8, 2, 1, 6, 6, 0, 2, 1, 5, 9, 1, 5, 2, 1]
        solution = 513
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase80(self):
        profit = [[7, 52, 86, 63, 89, 88, 71, 8, 8, 53, 68, 12, 2, 58, 92, 29, 0, 18, 34, 92, 82, 42, 54, 85, 21], [57, 66, 63, 82, 63, 16, 55, 90, 54, 44, 16, 60, 15, 95, 74, 66, 74, 85, 93, 50, 19, 76, 0, 53, 1], [41, 18, 45, 65, 17, 18, 49, 83, 11, 56, 47, 49, 21, 63, 100, 95, 21, 44, 50, 85, 48, 44, 37, 72, 1], [76, 51, 66, 30, 39, 72, 47, 97, 13, 46, 42, 72, 42, 76, 98, 67, 63, 68, 14, 32, 37, 99, 29, 64, 80]]
        start = 10
        quarantine = [4, 1, 0, 1, 4, 0, 1, 1, 4, 4, 1, 4, 2, 3, 1, 4, 0, 4, 0, 3, 4, 3, 2, 2, 1]
        solution = 173
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase81(self):
        profit = [[3], [62], [32], [28], [30]]
        start = 0
        quarantine = [0]
        solution = 155
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase82(self):
        profit = [[36, 49, 13, 22, 80, 18, 8, 18, 57, 76, 88, 50, 53, 35, 69, 40, 73, 60, 46, 5, 10, 91, 86, 91, 15, 12, 84], [24, 42, 57, 82, 60, 17, 64, 25, 84, 70, 56, 14, 64, 56, 57, 95, 87, 66, 50, 41, 95, 60, 20, 12, 23, 15, 37], [4, 47, 57, 31, 94, 86, 17, 88, 89, 19, 29, 92, 77, 17, 14, 4, 79, 42, 80, 7, 69, 64, 93, 17, 43, 52, 93], [62, 36, 31, 76, 20, 64, 33, 54, 80, 68, 84, 80, 33, 91, 41, 3, 91, 15, 84, 26, 61, 22, 28, 15, 10, 99, 53], [67, 21, 20, 78, 17, 4, 70, 76, 13, 63, 8, 77, 32, 96, 65, 80, 100, 91, 13, 15, 27, 12, 46, 32, 72, 82, 35]]
        start = 16
        quarantine = [5, 2, 4, 5, 4, 2, 0, 4, 0, 5, 1, 3, 5, 5, 0, 3, 0, 3, 2, 2, 0, 5, 1, 0, 4, 3, 3]
        solution = 430
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase83(self):
        profit = [[23, 76, 97, 13, 71, 3, 7, 48, 6, 81], [0, 82, 82, 0, 35, 10, 53, 94, 38, 7], [49, 15, 28, 88, 57, 24, 63, 53, 63, 16], [84, 97, 41, 66, 6, 76, 26, 60, 29, 11], [93, 56, 86, 46, 2, 69, 7, 42, 3, 43]]
        start = 2
        quarantine = [0, 2, 3, 5, 5, 2, 3, 3, 2, 0]
        solution = 334
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase84(self):
        profit = [[67, 69, 58, 31, 86, 5, 87, 30, 53, 65, 60, 100, 96, 97, 7, 57, 99, 32, 6, 69, 48, 57, 46, 10], [84, 26, 54, 15, 72, 39, 31, 75, 16, 70, 92, 25, 87, 57, 100, 87, 64, 48, 23, 38, 99, 89, 12, 87]]
        start = 18
        quarantine = [2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1, 2, 0, 2]
        solution = 29
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase85(self):
        profit = [[69, 28, 70, 66, 48, 1, 23, 4, 96, 2, 10, 57, 84, 25], [83, 91, 39, 73, 28, 22, 45, 32, 26, 75, 92, 27, 67, 86], [9, 99, 98, 55, 82, 58, 71, 1, 19, 32, 37, 63, 47, 59], [98, 40, 43, 50, 44, 32, 43, 41, 5, 37, 12, 5, 17, 50], [62, 79, 8, 68, 8, 30, 10, 37, 15, 35, 94, 41, 15, 22]]
        start = 4
        quarantine = [1, 1, 5, 4, 2, 1, 2, 5, 5, 5, 2, 5, 2, 0]
        solution = 210
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase86(self):
        profit = [[34, 29, 52, 51, 98, 79, 49, 100, 21, 73, 57, 56, 16, 90], [46, 59, 12, 89, 86, 92, 1, 39, 75, 89, 2, 73, 16, 70], [76, 44, 47, 51, 53, 98, 85, 3, 18, 67, 69, 74, 7, 47], [84, 52, 13, 25, 39, 87, 85, 6, 37, 38, 46, 86, 13, 64], [53, 33, 36, 86, 13, 16, 13, 65, 12, 80, 46, 49, 19, 45], [45, 58, 67, 44, 35, 94, 92, 85, 24, 68, 22, 91, 53, 41], [22, 64, 77, 51, 11, 52, 92, 37, 22, 84, 84, 85, 39, 65]]
        start = 8
        quarantine = [5, 3, 6, 3, 5, 6, 3, 5, 0, 4, 4, 4, 5, 7]
        solution = 209
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase87(self):
        profit = [[69, 74, 40, 51, 74, 88, 30, 91, 59, 73, 41, 60, 0, 45, 44]]
        start = 1
        quarantine = [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0]
        solution = 74
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase88(self):
        profit = [[35, 52, 93, 94, 54, 67, 40, 46], [15, 100, 1, 51, 16, 41, 40, 39], [53, 88, 64, 24, 41, 74, 0, 46]]
        start = 5
        quarantine = [3, 0, 1, 1, 3, 2, 3, 2]
        solution = 182
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase89(self):
        profit = [[2, 36, 85, 17, 52, 17, 73, 10, 80, 27, 38, 36, 82, 28, 67, 85, 8, 7, 90], [46, 81, 11, 42, 3, 13, 9, 25, 25, 62, 89, 87, 18, 27, 32, 35, 66, 58, 59], [31, 74, 72, 27, 19, 8, 77, 24, 93, 0, 25, 16, 92, 29, 21, 53, 66, 11, 24], [60, 24, 42, 1, 48, 53, 13, 100, 13, 79, 2, 66, 54, 40, 6, 2, 85, 99, 53], [10, 97, 84, 61, 75, 86, 66, 10, 89, 41, 85, 64, 13, 92, 3, 56, 58, 19, 50], [44, 17, 49, 62, 81, 74, 60, 63, 97, 50, 38, 3, 80, 4, 20, 32, 68, 35, 51], [35, 63, 61, 95, 18, 46, 100, 100, 26, 59, 96, 62, 13, 12, 80, 52, 47, 92, 24]]
        start = 8
        quarantine = [5, 4, 1, 1, 1, 5, 5, 6, 7, 1, 6, 4, 1, 3, 5, 4, 5, 0, 2]
        solution = 423
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase90(self):
        profit = [[33, 85, 49, 10, 11, 8, 89, 35, 23, 17, 2, 89, 18, 12, 38], [86, 0, 16, 81, 0, 80, 4, 47, 65, 73, 40, 90, 50, 44, 49], [2, 64, 80, 24, 97, 46, 88, 22, 46, 38, 46, 42, 96, 35, 54], [44, 44, 60, 52, 36, 32, 44, 15, 27, 61, 11, 96, 19, 74, 27], [37, 23, 61, 86, 4, 11, 99, 79, 53, 38, 35, 35, 99, 32, 94], [44, 94, 37, 77, 24, 71, 9, 81, 72, 3, 54, 80, 54, 3, 69]]
        start = 14
        quarantine = [4, 0, 2, 1, 6, 0, 5, 2, 0, 0, 3, 6, 3, 0, 3]
        solution = 331
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase91(self):
        profit = [[12, 5, 26, 18, 69, 46, 37, 0, 39, 8, 2, 3, 50, 84, 33, 18, 97, 77], [78, 50, 86, 68, 18, 82, 69, 14, 92, 67, 34, 21, 97, 69, 25, 90, 75, 23], [59, 4, 24, 71, 7, 6, 99, 32, 53, 42, 36, 26, 91, 76, 80, 53, 92, 85]]
        start = 17
        quarantine = [3, 3, 0, 0, 1, 2, 2, 1, 2, 3, 3, 0, 3, 3, 3, 2, 0, 3]
        solution = 185
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase92(self):
        profit = [[12, 68, 96, 57, 95, 38, 60, 80, 7, 86, 71, 92, 70, 13, 19, 77, 45, 94], [87, 86, 27, 74, 24, 49, 58, 1, 56, 49, 18, 28, 60, 84, 97, 19, 59, 57], [81, 37, 5, 22, 11, 12, 90, 58, 62, 18, 58, 71, 82, 28, 13, 98, 27, 18], [15, 57, 89, 37, 1, 37, 88, 75, 61, 69, 77, 48, 15, 26, 66, 90, 73, 15], [78, 40, 91, 94, 22, 4, 31, 94, 89, 21, 94, 6, 17, 94, 57, 25, 21, 19], [75, 0, 89, 43, 78, 70, 87, 64, 74, 79, 42, 86, 38, 70, 35, 72, 56, 95], [18, 96, 17, 18, 3, 92, 55, 91, 4, 90, 97, 60, 37, 67, 66, 53, 45, 14], [4, 82, 32, 85, 33, 41, 35, 74, 33, 53, 36, 58, 59, 4, 25, 88, 36, 31]]
        start = 17
        quarantine = [3, 4, 5, 3, 7, 4, 2, 4, 1, 8, 7, 1, 1, 3, 5, 3, 3, 0]
        solution = 343
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase93(self):
        profit = [[80, 33, 97, 89, 86, 31, 12, 49, 12], [93, 75, 49, 24, 30, 93, 90, 85, 7], [83, 4, 21, 95, 54, 35, 24, 65, 82], [68, 13, 44, 12, 15, 37, 40, 59, 93], [57, 28, 73, 51, 2, 45, 90, 17, 70], [34, 40, 76, 48, 70, 95, 55, 98, 36], [98, 50, 87, 40, 40, 50, 22, 59, 58], [59, 0, 5, 84, 71, 8, 82, 76, 19], [57, 20, 97, 0, 22, 40, 25, 55, 94], [93, 17, 29, 52, 32, 44, 84, 83, 86]]
        start = 3
        quarantine = [1, 10, 6, 0, 7, 1, 10, 6, 5]
        solution = 495
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase94(self):
        profit = [[80, 12, 58, 31, 53, 72, 24, 72, 21, 41, 93, 13, 24, 45, 95, 12, 9, 43, 45, 33, 64, 13, 57, 36, 16], [44, 38, 75, 58, 87, 23, 73, 26, 89, 47, 9, 73, 11, 60, 99, 12, 27, 31, 57, 30, 75, 95, 93, 57, 69], [36, 36, 27, 77, 94, 61, 5, 55, 88, 49, 96, 36, 94, 19, 85, 51, 63, 26, 72, 85, 54, 98, 19, 33, 81], [90, 56, 87, 52, 57, 54, 68, 85, 2, 75, 97, 76, 29, 40, 94, 29, 69, 68, 84, 58, 59, 96, 73, 78, 87]]
        start = 20
        quarantine = [4, 3, 0, 1, 4, 0, 4, 1, 4, 3, 0, 0, 1, 1, 1, 3, 3, 1, 3, 1, 3, 2, 1, 1, 0]
        solution = 252
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase95(self):
        profit = [[14, 34, 13, 74, 19, 68, 39, 75, 88, 48, 38, 75, 81, 88, 4, 84, 58, 48, 69, 25, 51, 13, 11], [2, 68, 87, 43, 74, 23, 87, 66, 15, 91, 83, 96, 37, 96, 74, 47, 7, 100, 73, 74, 10, 78, 29], [75, 13, 11, 56, 69, 37, 66, 20, 1, 4, 51, 33, 97, 40, 27, 36, 73, 43, 29, 84, 80, 73, 81], [32, 40, 20, 41, 87, 28, 67, 99, 68, 20, 90, 78, 5, 94, 96, 1, 19, 0, 46, 97, 30, 46, 94], [32, 85, 36, 54, 15, 92, 55, 69, 69, 54, 90, 87, 26, 89, 17, 28, 97, 60, 59, 56, 38, 59, 69], [57, 54, 53, 77, 6, 45, 12, 78, 88, 25, 90, 30, 67, 65, 31, 15, 74, 48, 32, 9, 57, 51, 60], [41, 41, 70, 41, 20, 38, 25, 19, 83, 62, 93, 14, 60, 4, 34, 66, 39, 83, 0, 41, 19, 61, 81]]
        start = 8
        quarantine = [6, 5, 2, 3, 1, 1, 5, 1, 7, 0, 2, 3, 3, 1, 6, 1, 7, 4, 2, 1, 6, 1, 2]
        solution = 412
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase96(self):
        profit = [[79, 87, 30, 99, 75, 36, 40, 10, 10, 61, 75, 97, 24, 93, 69, 19, 53, 29, 80, 97, 44, 54, 43, 21, 80, 75], [1, 72, 2, 28, 65, 35, 22, 16, 57, 37, 23, 66, 15, 15, 87, 89, 1, 12, 10, 6, 87, 58, 39, 93, 68, 24], [77, 95, 32, 52, 16, 2, 51, 41, 79, 90, 55, 65, 66, 69, 36, 55, 70, 56, 24, 78, 17, 82, 46, 35, 43, 72], [43, 91, 35, 82, 64, 0, 74, 46, 24, 95, 37, 65, 11, 92, 90, 10, 85, 56, 90, 11, 13, 27, 89, 88, 88, 29]]
        start = 9
        quarantine = [1, 2, 2, 1, 3, 0, 1, 0, 3, 2, 1, 3, 2, 0, 0, 3, 2, 3, 3, 4, 1, 2, 3, 0, 1, 3]
        solution = 283
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase97(self):
        profit = [[46, 10, 4, 84, 62, 47, 40, 0, 97, 86, 19, 38, 2, 41, 28, 75, 21, 81, 74, 46, 61, 11, 69, 16], [16, 32, 41, 69, 21, 77, 99, 69, 60, 22, 55, 65, 95, 89, 40, 14, 75, 8, 75, 90, 53, 26, 17, 21], [100, 73, 52, 61, 66, 33, 11, 13, 33, 13, 34, 15, 31, 58, 22, 6, 76, 11, 58, 61, 5, 4, 62, 4], [15, 3, 4, 68, 6, 51, 93, 93, 8, 34, 10, 78, 27, 98, 84, 70, 63, 54, 10, 60, 56, 21, 55, 58], [13, 69, 94, 95, 70, 1, 15, 32, 44, 9, 88, 72, 24, 10, 2, 60, 86, 17, 76, 90, 60, 88, 53, 57], [52, 81, 31, 0, 36, 57, 47, 21, 53, 81, 25, 42, 79, 3, 73, 56, 74, 100, 39, 6, 34, 84, 90, 64]]
        start = 15
        quarantine = [2, 4, 6, 1, 6, 1, 6, 2, 3, 2, 2, 3, 5, 3, 3, 5, 5, 6, 4, 5, 2, 6, 5, 4]
        solution = 281
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase98(self):
        profit = [[88, 23, 42, 33, 11, 79, 94, 46, 11, 77, 3, 82, 4, 41, 67, 39, 64, 22, 60, 90], [36, 9, 99, 37, 62, 23, 33, 72, 18, 51, 80, 36, 4, 58, 7, 21, 3, 82, 64, 20], [23, 65, 95, 38, 75, 16, 50, 0, 73, 46, 70, 98, 65, 95, 9, 30, 32, 81, 25, 31]]
        start = 15
        quarantine = [3, 1, 1, 0, 1, 0, 3, 2, 1, 2, 1, 3, 0, 0, 0, 1, 3, 0, 2, 0]
        solution = 95
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testCase99(self):
        profit = [[6, 55, 88, 18, 57, 16, 13, 12, 93, 68, 52, 79, 21, 54, 19, 14, 91, 68, 43, 35, 91, 55, 59, 0, 30, 44, 10], [86, 15, 83, 78, 53, 9, 31, 40, 35, 87, 32, 81, 22, 95, 62, 84, 1, 83, 2, 32, 17, 12, 59, 16, 0, 78, 48], [19, 93, 88, 92, 39, 28, 5, 98, 73, 18, 94, 54, 41, 27, 84, 10, 73, 21, 12, 29, 37, 86, 95, 3, 67, 41, 47], [29, 3, 5, 100, 78, 9, 57, 10, 52, 47, 28, 78, 48, 55, 29, 23, 34, 22, 46, 2, 66, 21, 32, 23, 64, 61, 87], [49, 89, 51, 30, 1, 86, 83, 55, 39, 27, 69, 27, 28, 14, 26, 49, 0, 91, 20, 0, 98, 89, 48, 91, 8, 78, 92], [78, 91, 88, 45, 56, 86, 38, 11, 66, 69, 56, 85, 62, 81, 99, 18, 24, 13, 15, 7, 75, 25, 44, 94, 29, 40, 77], [28, 25, 97, 25, 32, 67, 29, 44, 46, 46, 5, 32, 87, 77, 27, 21, 24, 2, 44, 20, 43, 77, 12, 64, 45, 87, 13], [58, 73, 9, 7, 31, 43, 86, 92, 55, 18, 0, 9, 81, 40, 10, 84, 10, 35, 29, 78, 24, 89, 36, 45, 99, 75, 41], [54, 59, 82, 59, 87, 26, 85, 97, 51, 13, 81, 8, 64, 8, 54, 100, 96, 26, 88, 40, 93, 76, 100, 92, 55, 60, 51]]
        start = 11
        quarantine = [9, 3, 4, 4, 0, 1, 6, 9, 7, 4, 6, 7, 7, 9, 3, 8, 0, 3, 2, 7, 7, 7, 0, 5, 0, 6, 3]
        solution = 453
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)

    def testEdgeCase1(self):
        profit = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
        start = 3
        quarantine = [1, 3, 0, 1, 0, 3]
        solution = 0
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)
    
    def testEdgeCase2(self):
        profit = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 10]]
        start = 3
        quarantine = [1, 3, 0, 1, 1, 0]
        solution = 10
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)
    
    def testEdgeCase3(self):
        profit = [[10], [20], [30]]
        start = 0
        quarantine = [3]
        solution = 60
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)
    
    def testEdgeCase4(self):
        profit = [[10, 30, 40, 50, 3, 17, 29, 35, 16, 48, 10, 20]]
        start = 5
        quarantine = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        solution = 17
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)
    
    def testEdgeCase5(self):
        profit = [[0, 10], [0, 30], [0, 30]]
        start = 0
        quarantine = [1, 2]
        solution = 0 
        self.assertEqual(best_itinerary(profit, quarantine, start), solution)
    

if __name__ == '__main__':
    unittest.main()